// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ActionsSecret extends pulumi.CustomResource {
    /**
     * Get an existing ActionsSecret resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ActionsSecretState, opts?: pulumi.CustomResourceOptions): ActionsSecret {
        return new ActionsSecret(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'github:index/actionsSecret:ActionsSecret';

    /**
     * Returns true if the given object is an instance of ActionsSecret.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ActionsSecret {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ActionsSecret.__pulumiType;
    }

    /**
     * Date of actionsSecret creation.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Plaintext value of the secret to be encrypted
     */
    public readonly plaintextValue!: pulumi.Output<string>;
    /**
     * Name of the repository
     */
    public readonly repository!: pulumi.Output<string>;
    /**
     * Name of the secret
     */
    public readonly secretName!: pulumi.Output<string>;
    /**
     * Date of actionsSecret update.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a ActionsSecret resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ActionsSecretArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ActionsSecretArgs | ActionsSecretState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ActionsSecretState | undefined;
            inputs["createdAt"] = state ? state.createdAt : undefined;
            inputs["plaintextValue"] = state ? state.plaintextValue : undefined;
            inputs["repository"] = state ? state.repository : undefined;
            inputs["secretName"] = state ? state.secretName : undefined;
            inputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as ActionsSecretArgs | undefined;
            if (!args || args.plaintextValue === undefined) {
                throw new Error("Missing required property 'plaintextValue'");
            }
            if (!args || args.repository === undefined) {
                throw new Error("Missing required property 'repository'");
            }
            if (!args || args.secretName === undefined) {
                throw new Error("Missing required property 'secretName'");
            }
            inputs["plaintextValue"] = args ? args.plaintextValue : undefined;
            inputs["repository"] = args ? args.repository : undefined;
            inputs["secretName"] = args ? args.secretName : undefined;
            inputs["createdAt"] = undefined /*out*/;
            inputs["updatedAt"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ActionsSecret.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ActionsSecret resources.
 */
export interface ActionsSecretState {
    /**
     * Date of actionsSecret creation.
     */
    readonly createdAt?: pulumi.Input<string>;
    /**
     * Plaintext value of the secret to be encrypted
     */
    readonly plaintextValue?: pulumi.Input<string>;
    /**
     * Name of the repository
     */
    readonly repository?: pulumi.Input<string>;
    /**
     * Name of the secret
     */
    readonly secretName?: pulumi.Input<string>;
    /**
     * Date of actionsSecret update.
     */
    readonly updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ActionsSecret resource.
 */
export interface ActionsSecretArgs {
    /**
     * Plaintext value of the secret to be encrypted
     */
    readonly plaintextValue: pulumi.Input<string>;
    /**
     * Name of the repository
     */
    readonly repository: pulumi.Input<string>;
    /**
     * Name of the secret
     */
    readonly secretName: pulumi.Input<string>;
}
