// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a GitHub user's SSH key resource.
//
// This resource allows you to add/remove SSH keys from your user account.
type UserSSHKey struct {
	pulumi.CustomResourceState

	Etag pulumi.StringOutput `pulumi:"etag"`
	// The public SSH key to add to your GitHub account.
	Key pulumi.StringOutput `pulumi:"key"`
	// A descriptive name for the new key. e.g. `Personal MacBook Air`
	Title pulumi.StringOutput `pulumi:"title"`
	// The URL of the SSH key
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewUserSSHKey registers a new resource with the given unique name, arguments, and options.
func NewUserSSHKey(ctx *pulumi.Context,
	name string, args *UserSSHKeyArgs, opts ...pulumi.ResourceOption) (*UserSSHKey, error) {
	if args == nil || args.Key == nil {
		return nil, errors.New("missing required argument 'Key'")
	}
	if args == nil || args.Title == nil {
		return nil, errors.New("missing required argument 'Title'")
	}
	if args == nil {
		args = &UserSSHKeyArgs{}
	}
	var resource UserSSHKey
	err := ctx.RegisterResource("github:index/userSSHKey:UserSSHKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserSSHKey gets an existing UserSSHKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserSSHKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserSSHKeyState, opts ...pulumi.ResourceOption) (*UserSSHKey, error) {
	var resource UserSSHKey
	err := ctx.ReadResource("github:index/userSSHKey:UserSSHKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserSSHKey resources.
type userSSHKeyState struct {
	Etag *string `pulumi:"etag"`
	// The public SSH key to add to your GitHub account.
	Key *string `pulumi:"key"`
	// A descriptive name for the new key. e.g. `Personal MacBook Air`
	Title *string `pulumi:"title"`
	// The URL of the SSH key
	Url *string `pulumi:"url"`
}

type UserSSHKeyState struct {
	Etag pulumi.StringPtrInput
	// The public SSH key to add to your GitHub account.
	Key pulumi.StringPtrInput
	// A descriptive name for the new key. e.g. `Personal MacBook Air`
	Title pulumi.StringPtrInput
	// The URL of the SSH key
	Url pulumi.StringPtrInput
}

func (UserSSHKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*userSSHKeyState)(nil)).Elem()
}

type userSSHKeyArgs struct {
	// The public SSH key to add to your GitHub account.
	Key string `pulumi:"key"`
	// A descriptive name for the new key. e.g. `Personal MacBook Air`
	Title string `pulumi:"title"`
}

// The set of arguments for constructing a UserSSHKey resource.
type UserSSHKeyArgs struct {
	// The public SSH key to add to your GitHub account.
	Key pulumi.StringInput
	// A descriptive name for the new key. e.g. `Personal MacBook Air`
	Title pulumi.StringInput
}

func (UserSSHKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userSSHKeyArgs)(nil)).Elem()
}
